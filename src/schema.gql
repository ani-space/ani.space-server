# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AiringScheduleEdge {
  node: AiringSchedule
}

type PageInfo {
  total: Int!
  perPage: Int!
  currentPage: Int!
  lastPage: Int!
  hasNextPage: Boolean!
}

type AiringScheduleConnection {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  edges: [AiringScheduleEdge!]
  nodes: [AiringSchedule!]
  pageInfo: PageInfo!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AiringSchedule {
  """The time the episode airs at"""
  airingAt: Int!

  """Seconds until episode starts airing"""
  timeUntilAiring: Int!

  """The airing episode number"""
  episode: Int!

  """The associate media id of the airing episode"""
  mediaId: Int!

  """The associate media of the airing episode"""
  anime: Anime!
}

type AnimeTitle {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  romaji: String
  english: String
  vietnamese: String
  native: String
  userPreferred: String
}

type AnimeDescription {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  english: String
  englishAIGenerate: String
  vietnamese: String
  vietnameseAIGenerate: String
}

type AnimeTrailer {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _id: String
  site: String
  thumbnail: String
}

type AnimeCoverImage {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  extraLarge: String
  large: String
  medium: String
  color: String
}

type AnimeGenres {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  genre: String!
  description: String
}

type AnimeSynonyms {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  synonym: String
  anime: Anime
}

type AnimeTag {
  name: String!
  descriptionEn: String
  descriptionVi: String
  category: String
  rank: Int
  isGeneralSpoiler: Boolean
  isMediaSpoiler: Boolean
  isAdult: Boolean
}

type AnimeRank {
  """The numerical rank of the media"""
  rank: Int!
  type: AnimeRankType!
  format: AnimeFormat!
  year: Int
  season: AnimeSeason

  """If the ranking is based on all time instead of a season/year"""
  allTime: Boolean!

  """String that gives context to the ranking type and time span"""
  context: String!
}

enum AnimeRankType {
  RATED
  POPULAR
}

enum AnimeFormat {
  TV
  TV_SHORT
  MOVIE
  SPECIAL
  OVA
  ONA
  MUSIC
}

enum AnimeSeason {
  WINTER
  SPRING
  SUMMER
  FALL
}

type CharacterAlternative {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
}

type CharacterName {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  first: String
  middle: String
  last: String
  full: String
  native: String
  alternative: [CharacterAlternative!]
  alternativeSpoiler: [CharacterAlternative!]
}

type CharacterImage {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  large: String
  medium: String
}

type FuzzyDateInt {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  year: Int
  month: Int
  day: Int
}

type StaffName {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  first: String
  middle: String
  last: String
  full: String
  native: String
  userPreferred: String
}

type StaffImage {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  large: String
  medium: String
}

type StaffYearActive {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  startYear: Int
  endYear: Int
}

type StaffPrimaryOccupation {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  occupation: String
}

type StaffEdge {
  node: Staff

  """The role of the staff member in the production of the media"""
  role: String

  """The order the staff should be displayed from the users favourites"""
  favouriteOrder: Int
}

type StaffConnection {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  edges: [StaffEdge!]
  nodes: [Staff!]
  pageInfo: PageInfo!
}

type Staff {
  name: StaffName
  languageV2: String
  image: StaffImage
  description: String
  gender: String
  dateOfBirth: FuzzyDateInt
  dateOfDeath: FuzzyDateInt
  primaryOccupations: [StaffPrimaryOccupation!]
  age: Int
  yearsActive: StaffYearActive
  homeTown: String
  bloodType: String

  """Characters voiced by the actor"""
  characters: CharacterConnection

  """The amount of user's who have favourited the staff member"""
  favorites: Int
}

type StaffRoleType {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!

  """The voice actors of the character"""
  voiceActor: Staff

  """Notes regarding the VA's role for the character"""
  roleNotes: String!

  """
  Used for grouping roles where multiple dubs exist for the same language. Either dubbing company name or language variant.
  """
  dubGroup: String!
}

type CharacterEdge {
  node: Character
  role: CharacterRole
  name: String

  """The voice actors of the character"""
  voiceActors: [Staff!]

  """The voice actors of the character with role date"""
  voiceActorRoles: [StaffRoleType!]
  anime: [Anime!]
}

enum CharacterRole {
  MAIN
  SUPPORTING
  BACKGROUND
}

type CharacterConnection {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  edges: [CharacterEdge!]
  nodes: [Character!]
  pageInfo: PageInfo!
}

type Character {
  name: CharacterName
  image: CharacterImage
  description: String
  gender: String
  dateOfBirth: FuzzyDateInt
  age: String
  bloodType: String
}

type AnimeEdge {
  node: Anime

  """The type of relation to the parent model"""
  relationType: AnimeRelation

  """
  If the studio is the main animation studio of the media (For Studio->MediaConnection field only)
  """
  isMainStudio: Boolean!

  """The characters in the media voiced by the parent actor"""
  characters: [Character!]

  """The characters role in the media"""
  characterRole: CharacterRole

  """Media specific character name"""
  characterName: String

  """Notes regarding the VA's role for the character"""
  roleNotes: String

  """
  Used for grouping roles where multiple dubs exist for the same language. Either dubbing company name or language variant.
  """
  dubGroup: String

  """The role of the staff member in the production of the media"""
  staffRole: String

  """The voice actors of the character"""
  voiceActors: [Staff!]

  """The voice actors of the character with role date"""
  voiceActorRoles: [StaffRoleType!]

  """The order the media should be displayed from the users favourites"""
  favouriteOrder: Int
}

"""Type of relation media has to its parent."""
enum AnimeRelation {
  """An adaption of this media into a different format"""
  ADAPTATION

  """Released before the relation"""
  PREQUEL

  """Released after the relation"""
  SEQUEL

  """The media a side story is from"""
  PARENT

  """A side story of the parent media"""
  SIDE_STORY

  """Shares at least 1 character"""
  CHARACTER

  """A shortened and summarized version"""
  SUMMARY

  """An alternative version of the same media"""
  ALTERNATIVE

  """An alternative version of the media with a different primary focus"""
  SPIN_OFF

  """Other"""
  OTHER

  """The source material the media was adapted from"""
  SOURCE
  COMPILATION
  CONTAINS
}

type AnimeConnection {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  edges: [AnimeEdge!]
  nodes: [Anime!]
  pageInfo: PageInfo!
}

type AnimeTrend {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  mediaId: Int!

  """The day the data was recorded (timestamp)"""
  date: Int!

  """The amount of media activity on the day"""
  trending: Int!

  """A weighted average score of all the user's scores of the media"""
  averageScore: Int

  """The number of users with the media on their list"""
  popularity: Int

  """The number of users with watching/reading the media"""
  inProgress: Int

  """If the media was being released at this time"""
  releasing: Boolean!

  """The episode number of the anime released on this day"""
  episode: Int

  """The related media"""
  anime: Anime!
}

type AnimeTrendEdge {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  node: AnimeTrend
}

type AnimeTrendConnection {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  edges: [AnimeTrendEdge!]
  nodes: [AnimeTrend!]
  pageInfo: PageInfo!
}

type Studio {
  name: String!

  """If the studio is an animation studio or a different kind of company"""
  isAnimationStudio: Boolean!

  """The media the studio has worked on"""
  anime: AnimeConnection
  siteUrl: String

  """The amount of user's who have favourited the studio"""
  favorites: Int
}

type StudioEdge {
  node: Studio

  """If the studio is the main animation studio of the anime"""
  isMain: Boolean!
  favouriteOrder: Int
}

type StudioConnection {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  edges: [StudioEdge!]
  nodes: [Studio!]
  pageInfo: PageInfo!
}

type AnimeStreamingEpisode {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  mediaExternalLink: MediaExternalLink!
  translationType: TranslationType

  """The language of the episode is dubbed (not the original language)."""
  language: String

  """The url of the external link or base url of link source"""
  site: String

  """Title of the episode"""
  title: String

  """Url of episode image thumbnail"""
  thumbnail: String

  """The url of the episode"""
  url: String
  cachedProxy: String
}

enum TranslationType {
  DUBBING_TRANSLATION
  SUBBING_TRANSLATION
}

type MediaExternalLink {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  anime: Anime!
  animeStreamingEpisodes: [AnimeStreamingEpisode!]

  """The url of the external link or base url of link source"""
  site: String

  """The links website site id"""
  siteId: Float
  type: ExternalLinkType

  """Language the site content is in. See Staff language field for values."""
  language: String
  color: String

  """
  The icon image url of the site. Not available for all links. Transparent PNG 64x64
  """
  icon: String
  notes: String
  isDisabled: Boolean
}

enum ExternalLinkType {
  INFO
  STREAMING
  SOCIAL
}

type Anime {
  idMal: Int
  startDate: FuzzyDateInt
  endDate: FuzzyDateInt
  title: AnimeTitle
  format: AnimeFormat
  status: AnimeStatus
  description: AnimeDescription
  season: AnimeSeason
  seasonYear: Int
  seasonInt: Int
  episodes: Int
  duration: Int
  countryOfOrigin: String
  isLicensed: Boolean
  source: AnimeSource
  hashtag: String
  trailer: AnimeTrailer
  updateAt: Int
  coverImage: AnimeCoverImage
  bannerImage: String
  genres: [AnimeGenres!]
  synonyms: [AnimeSynonyms!]
  averageScore: Int
  meanScore: Int
  popularity: Int
  tags: [AnimeTag!]
  relations: AnimeConnection
  characters: CharacterConnection

  """The staff who produced the media"""
  staff: StaffConnection

  """The companies who produced the media"""
  studios: StudioConnection
  isAdult: Boolean

  """The media's next episode airing schedule"""
  nextAiringEpisode: AiringSchedule

  """The media's entire airing schedule"""
  airingSchedule: AiringScheduleConnection

  """The media's daily trend stats"""
  trends: AnimeTrendConnection

  """On-demand streaming sources (May not be official!)"""
  mediaExternalLink: MediaExternalLink

  """
  The ranking of the media in a particular time span and format compared to other media
  """
  rankings: [AnimeRank!]
}

enum AnimeStatus {
  FINISHED
  RELEASING
  NOT_YET_RELEASED
  CANCELLED
  HIATUS
}

enum AnimeSource {
  ORIGINAL
  MANGA
  LIGHT_NOVEL
  VISUAL_NOVEL
  VIDEO_GAME
  OTHER
  NOVEL
  DOUJINSHI
  ANIME
  WEB_NOVEL
  LIVE_ACTION
  GAME
  COMIC
  MULTIMEDIA_PROJECT
  PICTURE_BOOK
}

type Query {
  trigger(animeSynchronization: SynchronizedAnimeEnum, page: Int! = 1): String!
}

enum SynchronizedAnimeEnum {
  ANIME_SCALAR_TYPE
  SAVE_ANIME_CHARACTERS_TYPE
  SAVE_ANIME_RELATIONS_TYPE
  SAVE_CHARACTERS_TYPE
  SAVE_STAFFS_TYPE
}